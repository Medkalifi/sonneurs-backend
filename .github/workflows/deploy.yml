name: Deploy Backend

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement cible'
        required: true
        type: choice
        options:
          - dev
          - prod
      target:
        description: 'Cible de déploiement'
        required: true
        type: choice
        options:
          - cloudrun
          - vm
          - gke

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ENV_FILE: deploy/env.${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Charger les variables d'environnement dynamiquement
        id: load-env
        run: |
          if [ ! -f "$ENV_FILE" ]; then
            echo "Fichier d'environnement introuvable : $ENV_FILE"
            exit 1
          fi
          set -a
          source "$ENV_FILE"
          set +a
          echo "Variables chargées depuis $ENV_FILE"

          echo "GCP_PROJECT=$GCP_PROJECT" >> $GITHUB_ENV
          echo "REGION=$REGION" >> $GITHUB_ENV
          echo "GCS_BUCKET=$GCS_BUCKET" >> $GITHUB_ENV
          echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          echo "DB_USERNAME=$DB_USERNAME" >> $GITHUB_ENV
          echo "INSTANCE_CONNECTION_NAME=$INSTANCE_CONNECTION_NAME" >> $GITHUB_ENV
          echo "VM_NAME=$VM_NAME" >> $GITHUB_ENV
          echo "VM_USER=$VM_USER" >> $GITHUB_ENV
          echo "VM_APP_PATH=$VM_APP_PATH" >> $GITHUB_ENV

      - name: Authentification GCP
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        run: |
          echo "$GCP_CREDENTIALS" | base64 --decode > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project $GCP_PROJECT

      - name: Déploiement Cloud Run
        if: ${{ github.event.inputs.target == 'cloudrun' }}
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          gcloud config set run/region $REGION
          gcloud run deploy springboot-backend \
            --image=$DOCKER_IMAGE \
            --platform=managed \
            --region=$REGION \
            --allow-unauthenticated \
            --timeout=600s \
            --set-env-vars DB_NAME=$DB_NAME,DB_USERNAME=$DB_USERNAME,DB_PASSWORD=$DB_PASSWORD,INSTANCE_CONNECTION_NAME=$INSTANCE_CONNECTION_NAME

      - name: 🔁 Nettoyage du déploiement existant (si présent)
        continue-on-error: true
        run: |
          kubectl delete deployment springboot-app -n dev || true
          kubectl delete svc springboot-service -n dev || true
          kubectl delete secret springboot-secret -n dev || true
          kubectl delete secret springboot-service-account-key -n dev || true

      - name: 🔐 Créer les secrets Kubernetes
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          kubectl create secret generic springboot-secret \
            --from-literal=DB_NAME=$DB_NAME \
            --from-literal=DB_USERNAME=$DB_USERNAME \
            --from-literal=DB_PASSWORD=$DB_PASSWORD \
            --from-literal=INSTANCE_CONNECTION_NAME=$INSTANCE_CONNECTION_NAME \
            -n dev

          echo "$GCP_CREDENTIALS" | base64 --decode > /tmp/key.json
          kubectl create secret generic springboot-service-account-key \
            --from-file=credentials.json=/tmp/key.json \
            -n dev

      - name: 📦 Appliquer les manifests Kubernetes
        run: |
          kubectl apply -f deploy/k8s/deployment.yml -n dev
          kubectl apply -f deploy/k8s/service.yml -n dev

